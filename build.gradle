buildscript {
    apply from: 'dependencies.gradle'
    dependencies {
        classpath deps.android.gradle_plugin
        classpath deps.kotlin.gradle_plugin
        classpath deps.spotbugs.gradle_plugin
    }
    //similar to: repositories {mavenCentral()}
    addRepos(repositories)
}

// Top-level build file where you can add configuration options common to all sub-projects/modules.
plugins {
    id 'com.google.dagger.hilt.android' version '2.44' apply false
    id 'com.android.application' version '7.3.1' apply false
    id 'com.android.library' version '7.3.1' apply false
    id 'org.jetbrains.kotlin.android' version '1.8.0' apply false
    id 'org.jetbrains.kotlin.plugin.serialization' version '1.6.21'
    id 'com.google.android.libraries.mapsplatform.secrets-gradle-plugin' version '2.0.1' apply false
}

apply from: "$project.rootDir/build_variants.gradle"

//defined in build_variants.gradle
createFlavorTypeVariants { type, flavor ->
    //demo, full etc. are flavors
    //debug, release, staging etc. are build types
    def myType = "$flavor${type.capitalize()}"
    task "spotbugs${myType.capitalize()}"(type: DefaultTask) {
        group 'Verification'
        description "Run Spotbugs on the whole project."
    }
    /*task "${myType}"(type: DefaultTask) {
        group 'Verification'
        description "Run Spotbugs on the whole project."
    }*/
}

/*createTypeOnlyVariants { type ->
    def myType = "${type.capitalize()}"
    task "spotbugs${myType.capitalize()}"(type: DefaultTask) {
        group 'Verification'
        description "Run Spotbugs on the whole project."
    }
    task "${myType}"(type: DefaultTask) {
        group 'Verification'
        description "Run Spotbugs on the whole project."
    }
}

createFlavorOnlyVariants { flavor ->
    def myType = "${flavor.capitalize()}"
    task "spotbugs${myType.capitalize()}"(type: DefaultTask) {
        group 'Verification'
        description "Run Spotbugs on the whole project."
    }
    task "${myType}"(type: DefaultTask) {
        group 'Verification'
        description "Run Spotbugs on the whole project."
    }
}*/


subprojects {
    //includes checkstyle, spotbugs, pmd
    apply from: "$project.rootDir/config/codequality.gradle"
    afterEvaluate {
        preBuild.dependsOn('checkstyle')
        check.dependsOn 'checkstyle'
        preBuild.dependsOn('pmd')
        check.dependsOn 'pmd'
        assemble.dependsOn('lint')
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}